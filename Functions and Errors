// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract FunctionAndErrors {
    address public Symon;

    constructor() {
        Symon = msg.sender;
    }

    function transferEther(address recipient, uint256 amount) external {
        
        require(msg.sender == Symon, "Only the owner can transfer Ether");
        
        require(recipient != address(0), "Invalid recipient address");

        
        require(address(this).balance >= amount, "Insufficient balance");

       
        payable(recipient).transfer(amount);
    }

    function assertCondition(uint256 inputValue) external pure returns (uint256) {
        
        assert(inputValue != 0);
        
        // Return the inputValue multiplied by 2
        return inputValue * 2;
    }

    function revertFunction(uint256 inputValue) external pure returns (uint256) {
        
        if (inputValue == 0) {
            revert("Input cannot be zero");
        }
        
        return inputValue * 2;
    }
}
